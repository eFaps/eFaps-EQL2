@Ecore(nsURI="http://www.efaps.org/EQL")
@GenModel(modelName="EQL",
    modelDirectory="EQL2/src/main/xcore-gen",
    arrayAccessors="true",
    dataTypeConverters="true",
    codeFormatting="true",
    cleanup="true",
    suppressGenModelAnnotations="false",
    binaryCompatibleReflectiveMethods="true",
    forceOverwrite="true",
    complianceLevel="8.0",
    interfaceNamePattern="I{0}",
    classNamePattern="{0}",
    copyrightFields="true",
    copyrightText="Copyright 2003 - 2016 The eFaps Team

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.")
package org.efaps.eql

interface Statement<T>
    extends EQLElement, Generic<T>
{
}

interface ObjectStmt<T>
    extends Statement<T>
{
    //@GenModel(suppressedSetVisibility="true")
    String oid

    op T setOidC(String _oid) {
        this.oid = _oid
        return getThis()
    }
}

interface ListStmt<T>
    extends Statement<T>
{
    String[] oids

    op T addOid(String _oid) {
        oidsList.add(_oid)
        return getThis()
    }
}

interface QueryStmt<T>
    extends Statement<T>
{
    contains Query query

    op T setQueryC(Query _query)
    {
        setQuery(_query)
        return getThis()
    }
}

interface UpdateElementsStmt<T>
    extends Statement<T>
{
    contains UpdateElement[] updateElements
}

abstract class PrintStatement<T>
    extends Statement<T>, Ordered
{
    contains Selection selection opposite printStatement

    op T setSelectionC(Selection _selection) {
        setSelection(_selection)
        return getThis()
    }
}

class PrintObjectStatement
    extends PrintStatement<PrintObjectStatement>, ObjectStmt<PrintObjectStatement>
{

    op String eqlStmt() {
        var String ret =  "print object " + oid + " "
        if (getSelection() != null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        return ret
    }

    op PrintObjectStatement getThis() {
        return this
    }
}

class PrintListStatement
    extends PrintStatement<PrintListStatement>, ListStmt<PrintListStatement>
{
    op String eqlStmt() {
        var String ret =  "print list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        if (getSelection() != null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        return ret
    }

    op PrintListStatement getThis() {
        return this
    }
}

class PrintQueryStatement
    extends PrintStatement<PrintQueryStatement>, QueryStmt<PrintQueryStatement>
{
    op String eqlStmt() {
        var String ret =  "print "
        if (getQuery() != null) {
            ret = ret + getQuery().eqlStmt()
        }
        if (getSelection() != null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        return ret
    }

    op PrintQueryStatement getThis() {
        return this
    }
}

class UpdateStatement<T> extends UpdateElementsStmt<T>
{
}

class UpdateObjectStatement
    extends UpdateStatement<UpdateObjectStatement>, ObjectStmt<UpdateObjectStatement>
{
    op String eqlStmt() {
        return "update object " + oid
    }
}


class UpdateListStatement
    extends UpdateStatement<UpdateListStatement>, ListStmt<UpdateListStatement>
{
}

class UpdateQueryStatement
    extends UpdateStatement<UpdateQueryStatement>, QueryStmt<UpdateQueryStatement>
{
}

class DeleteStatement<T>
    extends Statement<T>
{
}

class DeleteObjectStatement
    extends DeleteStatement<DeleteObjectStatement>, ObjectStmt<DeleteObjectStatement>
{
    op String eqlStmt() {
        return "delete object " + oid
    }

    op DeleteObjectStatement getThis()
    {
        return this
    }
}

class DeleteListStatement
    extends DeleteStatement<DeleteListStatement>, ListStmt<DeleteListStatement>
{
     op String eqlStmt() {
        var String ret =  "delete list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        return ret
    }

    op DeleteListStatement getThis()
    {
        return this
    }
}

class DeleteQueryStatement
    extends DeleteStatement<DeleteQueryStatement>, QueryStmt<DeleteQueryStatement>
{
}



class InsertStatement
    extends UpdateElementsStmt<InsertStatement>, Typed<InsertStatement>
{
    op String eqlStmt() {
        return "insert type " + getTypeName()
    }

    op InsertStatement getThis()
    {
        return this
    }
}

interface CIPrintStatement<T> extends Statement<T>
{
}

class CIPrintTypeStatement
    extends CIPrintStatement<CIPrintTypeStatement>, Typed<CIPrintTypeStatement>
{
    op String eqlStmt() {
        return "print ci type " + getTypeName()
    }
}

class CIPrintFormStatement
    extends CIPrintStatement<CIPrintFormStatement>, Named<CIPrintFormStatement>
{
    op String eqlStmt() {
        return "print ci form " + getName()
    }

    op CIPrintFormStatement getThis()
    {
        return this
    }
}

class Order {
    contains OrderElement[] elements
}

class OrderElement {
    String key
    Boolean desc
}

class Limit
    extends EQLElement
{
    String value = "-1"

    op String eqlStmt() {
        return "limit " + value
    }
}

class ExecStatement
    extends Statement<ExecStatement>
{
    String className

    String[] parameters

    contains ExecSelectionElement[] selects

    contains Order order

    op String eqlStmt() {
        return "execute " + getClassName()
    }
}



interface Named<T>
    extends SelectElement, Generic<T>
{
    String name
    op T setNameC(String _name)
    {
        setName(_name)
        return getThis()
    }
}

interface Typed<T>
    extends Generic<T>
{
    String typeName

    op T setTypeNameC(String _typeName)
    {
        setTypeName(_typeName)
        return getThis()
    }
}

interface SelectElement
    extends EQLElement
{
}

class LinkfromSelectElement
    extends SelectElement, Typed<LinkfromSelectElement>
{
    String attribute

    op LinkfromSelectElement setAttributeC(String _attribute) {
       setAttribute(_attribute)
       return this;
    }

    op String eqlStmt() {
        return "linkfrom[" + typeName + "#" + attribute + "]"
    }

    op LinkfromSelectElement getThis()
    {
        return this
    }
}

class ClassSelectElement
    extends Named<ClassSelectElement>
{
    op ClassSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }

    op String eqlStmt() {
        return "class[" + getName() + "]"
    }

    op ClassSelectElement getThis()
    {
        return this
    }
}

class LinktoSelectElement
    extends Named<LinktoSelectElement>
{

    op LinktoSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }

    op String eqlStmt() {
        return "linkto[" + getName() + "]"
    }

    op LinktoSelectElement getThis()
    {
        return this
    }
}

class AttributeSelectElement
    extends Named<AttributeSelectElement>
{
    op AttributeSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "attribute[" + getName() +  "]"
    }

    op AttributeSelectElement getThis()
    {
        return this
    }
}

class AttributeSetSelectElement extends Named<AttributeSetSelectElement> {
}

class FormatSelectElement
    extends SelectElement
{
    String value

     op FormatSelectElement setValueC(String _value) {
        setValue(_value);
        return this
    }

    op String eqlStmt() {
         return "format[" + value + "]"
    }
}

class BaseSelectElement
    extends SelectElement
{
    SimpleSelectElement element

    op BaseSelectElement setElementC(SimpleSelectElement _element) {
        setElement(_element);
        return this
    }

    op String eqlStmt() {
         return element.getLiteral()
    }
}

class ExecSelectElement
    extends SelectElement
{
    String className

    String[] parameters

    op ExecSelectElement setClassNameC(String _className)
    {
        setClassName(_className)
        return this
    }

    op ExecSelectElement addParameter(String _parameter)
    {
        parametersList.add(_parameter)
        return this
    }

    op String eqlStmt() {
        var String ret = "execute " + className ;
        for (String parameter : parametersList) {
            ret = ret + " " + parameter
        }
        return ret
    }
}

class Selection
    extends EQLElement
{
    container PrintStatement<?> printStatement opposite selection

    contains Select[] selects

    op Selection addSelect(Select _select) {
        selectsList.add(_select)
        return this
    }

    op String eqlStmt() {
        var String ret = "select ";
        var first = true
        for (ISelect select : getSelectsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + select.eqlStmt()
        }
        return ret
    }
}

class Select
    extends EQLElement
{
    String alias

    contains SelectElement[] elements

    op Select setAliasC(String _alias) {
        setAlias(_alias)
        return this
    }

    op Select addElement(SelectElement _element) {
        elementsList.add(_element)
        return this
    }

    op String eqlStmt() {
        var String ret = " ";
        var first = true
        for (ISelectElement element : getElementsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + "."
            }
            ret = ret + element.eqlStmt()
        }
        if (alias != null) {
            ret = ret + " as " + alias
        }
        return ret
    }
}

class ExecSelectionElement {
    String index
    String alias
}

class Where {
    contains WhereElement[] elements
}

class WhereElement {
    String attribute
    contains NestedQuery nestedQuery
    String[] values
    Comparison comparison
}

class UpdateElement {
    String attribute
    String value
}

abstract class BaseQuery<T>
    extends EQLElement, Generic<T>
{

    String[] types

    op T addType(String _type)
    {
        typesList.add(_type)
        return getThis
    }

    contains Where where

    op String eqlStmt() {
        var String ret =  "query type "
        var first = true
        for (String aType : typesList) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + aType
        }
        return ret
    }
}

class Query
    extends BaseQuery<Query>
{

    contains Limit limit

    op Query setLimitC(Limit _limit)
    {
        setLimit(_limit)
        return this
    }

    op String eqlStmt() {
        var ret = super.eqlStmt()
        if (limit != null) {
            ret + " " + limit.eqlStmt()
        }
        return ret
    }

    op Query getThis()
    {
        return this
    }
}

class NestedQuery
    extends BaseQuery<NestedQuery>
{
    contains Selection selection

    op NestedQuery getThis()
    {
        return this
    }
}

enum Comparison
{
    EQUAL as "=="
    LESS as "<"
    GREATER as ">"
    UNEQUAL as "!="
    LIKE as"like"
    IN as "in"
    NOTIN as "not in"
}

enum SimpleSelectElement
{
    TYPE as "type"
    OID as "oid"
    INSTANCE as "instance"
    LABEL as "label"
    ID as "id"
    UUID as "uuid"
    NAME as "name"
    CLASS as "class"
    VALUE as "value"
    BASE as "base"
    UOM as "uom"
    FILE as "file"
    LENGTH as "length"
    STATUS as "status"
    KEY as "key"
}

interface Ordered {
    contains Order order
}

interface EQLElement
{
    op String eqlStmt()
}

interface Generic<T>
{
    op T getThis()
}

