@Ecore(nsURI="http://www.efaps.org/EQL")
@GenModel(modelName="EQL",
    modelDirectory="EQL2/src/main/xcore-gen",
    arrayAccessors="true",
    dataTypeConverters="true",
    codeFormatting="true",
    cleanup="true",
    suppressGenModelAnnotations="false",
    binaryCompatibleReflectiveMethods="true",
    forceOverwrite="true",
    complianceLevel="8.0")
package org.efaps.eql


interface Statement
    extends EQLElement
{
}

interface ObjectStatement
    extends Statement
{
    String oid
}

interface ListStatement
    extends Statement
{
    String[] oids
}

interface QueryStatement
    extends Statement
{
    contains Query query
}

interface UpdateElementsStatement
    extends Statement
{
    contains UpdateElement[] updateElements
}

abstract class PrintStatement
    extends Statement, Ordered
{
    contains Selection selection opposite printStatement
}

class ObjectPrintStatement
    extends PrintStatement
{
    String oid

    op ObjectPrintStatement setOidC(String _oid) {
        oid = _oid
        return this
    }

    op PrintStatement setSelectionC(Selection _selection) {
        setSelection(_selection)
        return this
    }

    op String eqlStmt() {
        var String ret =  "print object " + oid + " "
        if (getSelection() != null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        return ret
    }
}

class ListPrintStatement
    extends PrintStatement
{
    String[] oids

    op ListPrintStatement addOid(String _oid) {
        getOidsList().add(_oid);
        return this
    }

    op PrintStatement setSelectionC(Selection _selection) {
        setSelection(_selection)
        return this
    }

    op String eqlStmt() {
        var String ret =  "print list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        if (getSelection() != null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        return ret
    }
}

class UpdateStatement extends UpdateElementsStatement
{
}

class ObjectUpdateStatement
    extends UpdateStatement, ObjectStatement
{
    op String eqlStmt() {
        return "update object " + oid
    }
}

class ListUpdateStatement extends UpdateStatement, ListStatement{
}

class QueryUpdateStatement extends UpdateStatement, QueryStatement{
}

class DeleteStatement extends Statement
{
}

class ObjectDeleteStatement
    extends DeleteStatement, ObjectStatement
{
    op String eqlStmt() {
        return "delete object " + oid
    }
}

class ListDeleteStatement extends DeleteStatement, ListStatement
{
}

class QueryDeleteStatement extends DeleteStatement, QueryStatement
{
}

interface Typed
{
    String typeName
}

class InsertStatement
    extends UpdateElementsStatement, Typed
{
    op String eqlStmt() {
        return "insert type " + getTypeName()
    }
}

interface CIPrintStatement extends Statement
{
}

class CIPrintTypeStatement
    extends CIPrintStatement, Typed
{
    op String eqlStmt() {
        return "print ci type " + getTypeName()
    }
}

class CIPrintFormStatement
    extends CIPrintStatement, Named<CIPrintFormStatement>
{
    op String eqlStmt() {
        return "print ci form " + getName()
    }

    op CIPrintFormStatement getThis()
    {
        return this
    }
}

class Order {
    contains OrderElement[] elements
}

class OrderElement {
    String key
    Boolean desc
}

class Limit {
    String value = "-1"
}

class ExecStatement
    extends Statement
{
    String className

    String[] parameters

    contains ExecSelectionElement[] selects

    contains Order order

    op String eqlStmt() {
        return "execute " + getClassName()
    }
}

interface SelectElement
    extends EQLElement
{
}

interface Named<T>
    extends SelectElement, Generic<T>
{
    String name
    op T setNameC(String _name)
    {
        setName(_name)
        return getThis()
    }
}

class LinkfromSelectElement extends SelectElement,Typed {
    String attribute
}

class ClassSelectElement extends Named<ClassSelectElement> {
    op ClassSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String toString() {
        return "class[" + getName() + "]"
    }
}

class LinktoSelectElement extends Named<LinktoSelectElement> {
    op LinktoSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
}

class AttributeSelectElement
    extends Named<AttributeSelectElement>
{
    op AttributeSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "attribute[" + getName() +  "]"
    }

    op AttributeSelectElement getThis()
    {
        return this
    }
}

class AttributeSetSelectElement extends Named<AttributeSetSelectElement> {
}

class FormatSelectElement extends SelectElement {
    String value
}

class BaseSelectElement extends SelectElement {
    SimpleSelectElement element
}

class ExecSelectElement extends SelectElement {
    String className
    String[] parameters
}

class Selection
    extends EQLElement
{
    container PrintStatement printStatement opposite selection

    contains Select[] selects

    op Selection addSelect(Select _select) {
        selectsList.add(_select)
        return this
    }

    op String eqlStmt() {
        var String ret = "select ";
        var first = true
        for (Select select : getSelectsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + select.eqlStmt()
        }
        return ret
    }
}

class Select
    extends EQLElement
{
    String alias

    contains SelectElement[] elements

    op Select addElement(SelectElement _element) {
        elementsList.add(_element)
        return this
    }

    op String eqlStmt() {
        var String ret = " ";
        var first = true
        for (SelectElement element : getElementsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + "."
            }
            ret = ret + element.eqlStmt()
        }
        if (alias != null) {
            ret = ret + " as " + alias
        }
        return ret
    }
}

class ExecSelectionElement {
    String index
    String alias
}

class Where {
    contains WhereElement[] elements
}

class WhereElement {
    String attribute
    contains NestedQuery nestedQuery
    String[] values
    Comparison comparison
}

class UpdateElement {
    String attribute
    String value
}

interface BaseQuery {
    String[] types
    contains Where where
}

class Query extends BaseQuery{
    contains Limit limit
}

class NestedQuery extends BaseQuery{
    contains Selection selection
}

enum Comparison {
    EQUAL
    LESS
    GREATER
    UNEQUAL
    LIKE
    IN
    NOTIN
}

enum SimpleSelectElement
{
    TYPE
    OID
    INSTANCE
    LABEL
    ID
    UUID
    NAME
    CLASS
    VALUE
    BASE
    UOM
    FILE
    LENGTH
    STATUS
    KEY
}

interface Ordered {
    contains Order order
}

interface EQLElement
{
    op String eqlStmt()
}

interface Generic<T>
{
    op T getThis()
}

