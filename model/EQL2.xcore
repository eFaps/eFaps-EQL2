@Ecore(nsURI="http://www.efaps.org/EQL2")
@GenModel(modelName="EQL2",
    modelDirectory="EQL2/src/main/xcore-gen",
    arrayAccessors="true",
    dataTypeConverters="true",
    codeFormatting="true",
    cleanup="true",
    suppressGenModelAnnotations="false",
    binaryCompatibleReflectiveMethods="true",
    forceOverwrite="true",
    complianceLevel="8.0",
    interfaceNamePattern="I{0}",
    classNamePattern="{0}",
    copyrightFields="true",
    copyrightText="        Copyright 2003 - 2020 The eFaps Team

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.")

package org.efaps.eql2

import org.apache.commons.lang3.StringUtils

annotation "http://www.eclipse.org/emf/2002/Ecore" as Ecore
annotation "http://www.eclipse.org/emf/2002/GemModel" as GenModel

interface Statement<T> extends EQLElement, Generic<T>
{
    StmtFlag[] flags
    op T addFlag(StmtFlag _flag) {
        flagsList.add(_flag)
        return getThis()
    }
    op String flagStr() {
        if (getFlagsList().isEmpty()) {
            return ""
        }
        var ret = "with "
        var first = true
        for (StmtFlag flag : getFlagsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + flag
        }
        return ret + " "
    }
}

interface ObjectStmt<T> extends Statement<T>
{
    // @GenModel(suppressedSetVisibility="true")
    String oid
    op T setOidC(String _oid) {
        this.oid = _oid
        return getThis()
    }
    op T oid(String _oid) {
        this.oid = _oid
        return getThis()
    }
}

interface ListStmt<T> extends Statement<T>
{
    String[] oids
    op T addOid(String _oid) {
        oidsList.add(_oid)
        return getThis()
    }
}

interface QueryStmt<T> extends Statement<T>
{
    contains Query query
    op T setQueryC(Query _query) {
        setQuery(_query)
        return getThis()
    }
    op T query() {
        if (getQuery() === null) {
            setQuery(IEql2Factory.eINSTANCE.createQuery())
        }
        return getThis()
    }
    op T query(Query _query) {
        setQuery(_query)
        return getThis()
    }
}

class UpdateElementsStmt<T> extends Statement<T>
{
    contains UpdateElement[] updateElements
    op T addUpdateElements(UpdateElement _element) {
        updateElementsList.add(_element)
        return getThis()
    }
    op T update(String _attribute, String _value) {
        var element = IEql2Factory.eINSTANCE.createUpdateElement()
        updateElementsList.add(element)
        element.attribute(_attribute)
        element.value(_value)
        return getThis()
    }
    op String eqlStmt() {
        var String ret = " set "
        var first = true
        for (IUpdateElement ele : getUpdateElementsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + ele.eqlStmt()
        }
        return ret
    }
}

abstract class PrintStatement<T> extends Statement<T>, Ordered<T>
{
    contains Selection selection opposite printStatement
    op T setSelectionC(Selection _selection) {
        setSelection(_selection)
        return getThis()
    }
    op T selection() {
        if (getSelection === null) {
            setSelection(IEql2Factory.eINSTANCE.createSelection)
        }
        return getThis()
    }
}

class PrintObjectStatement
    extends PrintStatement<PrintObjectStatement>, ObjectStmt<PrintObjectStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "print object " + oid + " "
        if (getSelection() !== null) {
            ret = ret + getSelection().eqlStmt()
        }
        return ret
    }
    op PrintObjectStatement getThis() {
        return this
    }
}

class PrintListStatement
    extends PrintStatement<PrintListStatement>, ListStmt<PrintListStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "print list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        if (getSelection() !== null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        if (getOrder() !== null) {
            ret = ret + getOrder().eqlStmt()
        }
        return ret
    }
    op PrintListStatement getThis() {
        return this
    }
}

class PrintQueryStatement
    extends PrintStatement<PrintQueryStatement>, QueryStmt<PrintQueryStatement>, Pageable<PrintQueryStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "print "
        if (getQuery() !== null) {
            ret = ret + getQuery().eqlStmt()
        }
        if (getSelection() !== null) {
            ret = ret + " " + getSelection().eqlStmt()
        }
        if (getOrder() !== null) {
            ret = ret + getOrder().eqlStmt()
        }
        return ret
    }
    op PrintQueryStatement getThis() {
        return this
    }
}

class UpdateStatement<T> extends UpdateElementsStmt<T>
{
}

class UpdateObjectStatement
    extends UpdateStatement<UpdateObjectStatement>, ObjectStmt<UpdateObjectStatement>
{
    op String eqlStmt() {
        var ret = flagStr() + "update object " + getOid()
        if (updateElementsList.size > 0) {
            ret = ret + super.eqlStmt()
        }
        return ret
    }
    op UpdateObjectStatement getThis() {
        return this
    }
}

class UpdateListStatement
    extends UpdateStatement<UpdateListStatement>, ListStmt<UpdateListStatement>
{
    op String eqlStmt() {
        var ret = flagStr() + "update list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        if (updateElementsList.size > 0) {
            ret = ret + super.eqlStmt()
        }
        return ret
    }
    op UpdateListStatement getThis() {
        return this
    }
}

class UpdateQueryStatement
    extends UpdateStatement<UpdateQueryStatement>, QueryStmt<UpdateQueryStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "update "
        if (getQuery() !== null) {
            ret = ret + getQuery().eqlStmt()
        }
        if (updateElementsList.size > 0) {
            ret = ret + super.eqlStmt()
        }
        return ret
    }
    op UpdateQueryStatement getThis() {
        return this
    }
}

class DeleteStatement<T> extends Statement<T>
{
}

class DeleteObjectStatement
    extends DeleteStatement<DeleteObjectStatement>, ObjectStmt<DeleteObjectStatement>
{
    op String eqlStmt() {
        return flagStr() + "delete object " + oid
    }
    op DeleteObjectStatement getThis() {
        return this
    }
}

class DeleteListStatement
    extends DeleteStatement<DeleteListStatement>, ListStmt<DeleteListStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "delete list ("
        var first = true
        for (String oid : getOidsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + oid
        }
        ret = ret + ")"
        return ret
    }
    op DeleteListStatement getThis() {
        return this
    }
}

class DeleteQueryStatement
    extends DeleteStatement<DeleteQueryStatement>, QueryStmt<DeleteQueryStatement>
{
    op String eqlStmt() {
        var String ret = flagStr() + "delete "
        if (getQuery() !== null) {
            ret = ret + getQuery().eqlStmt()
        }
        return ret
    }
    op DeleteQueryStatement getThis() {
        return this
    }
}

class InsertStatement
    extends UpdateElementsStmt<InsertStatement>, Typed<InsertStatement>
{
    op String eqlStmt() {
        var ret = flagStr() + "insert type " + getTypeName()
        if (updateElementsList.size > 0) {
            ret = ret + super.eqlStmt()
        }
        return ret
    }
    op InsertStatement getThis() {
        return this
    }
}

interface CIPrintStatement<T> extends Statement<T>
{
}

class CIPrintTypeStatement
    extends CIPrintStatement<CIPrintTypeStatement>, Typed<CIPrintTypeStatement>
{
    op String eqlStmt() {
        return "print ci type " + getTypeName()
    }
    op CIPrintTypeStatement getThis() {
        return this
    }
}

class CIPrintFormStatement
    extends CIPrintStatement<CIPrintFormStatement>, Named<CIPrintFormStatement>
{
    op String eqlStmt() {
        return "print ci form " + getName()
    }
    op CIPrintFormStatement getThis() {
        return this
    }
}

interface Ordered<T> extends Generic<T>, EQLElement
{
    contains Order order
    op T order(Order _order) {
        setOrder(_order)
        return getThis()
    }
    op T orderBy(String _key, boolean _desc) {
        if (getOrder() === null) {
            setOrder(IEql2Factory.eINSTANCE.createOrder)
        }
        getOrder().addElement(_key, _desc)
        return getThis()
    }
}

class Order
    extends EQLElement
{
    contains OrderElement[] elements
    op Order addElement(OrderElement _element) {
        elementsList.add(_element)
        return this
    }
    op Order addElement(String _key, boolean _desc) {
        var ele = IEql2Factory.eINSTANCE.createOrderElement
        ele.key(_key).desc(_desc)
        elementsList.add(ele)
        return this
    }
    op String eqlStmt() {
        var String ret = " order by "
        var first = true
        for (IOrderElement ele : getElementsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + ele.eqlStmt()
        }
        return ret
    }
}

class OrderElement
    extends EQLElement
{
    String key
    boolean desc = "false"
    op OrderElement key(String _key) {
        setKey(_key)
        return this
    }
    op OrderElement desc(boolean  _desc) {
        setDesc(_desc)
        return this
    }
    op String eqlStmt() {
        var String ret = key
        if (desc) {
            ret = ret + " desc"
        } else {
            ret = ret + " asc"
        }
        return ret
    }
}

interface Pageable <T extends QueryStmt<T>> extends Generic<T>, EQLElement, QueryStmt<T> {

    op T limit(Limit _limit) {
        getQuery().setLimit(_limit)
        return getThis()
    }
    op T offset(Offset _offset) {
        getQuery().setOffset(_offset)
        return getThis()
    }
}

class Limit
    extends EQLElement
{
    String value = "-1"
    op Limit setValueC(String _value) {
        setValue(_value)
        return this
    }
    op Limit value(String _value) {
        setValue(_value)
        return this
    }
    op String eqlStmt() {
        return "limit " + getValue()
    }
}

class Offset
    extends EQLElement
{
    String value = "-1"
    op Offset setValueC(String _value) {
        setValue(_value)
        return this
    }
    op Offset value(String _value) {
        setValue(_value)
        return this
    }
    op String eqlStmt() {
        return "offset " + getValue()
    }
}


class ExecStatement
    extends Statement<ExecStatement>, Ordered<ExecStatement>
{
    String className
    String[] parameters
    contains ExecSelectionElement[] selections
    op ExecStatement className(String _className) {
        setClassName(_className)
        return this
    }
    op ExecStatement addParameter(String _parameter) {
        parametersList.add(_parameter)
        return this
    }
    op ExecStatement addSelection(ExecSelectionElement _selection) {
        selectionsList.add(_selection)
        return this
    }
    op String eqlStmt() {
        var String ret = flagStr() + "execute " + getClassName()
        var first = true
        for (String para : getParametersList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + para
        }
        if (getSelectionsList().size() > 0) {
            ret = ret + " select "
            first = true
            for (IExecSelectionElement select : getSelectionsList()) {
                if (first) {
                    first = false
                } else {
                    ret = ret + ", "
                }
                ret = ret + select.eqlStmt()
            }
        }
        if (getOrder() !== null) {
            ret = ret + getOrder().eqlStmt()
        }
        return ret
    }
    op ExecStatement getThis() {
        return this
    }
}

interface Named<T> extends SelectElement, Generic<T>
{
    String name
    op T setNameC(String _name) {
        setName(_name)
        return getThis()
    }
    op T name(String _name) {
        setName(_name)
        return getThis()
    }
}

interface Typed<T> extends Generic<T>
{
    String typeName
    op T setTypeNameC(String _typeName) {
        setTypeName(_typeName)
        return getThis()
    }
    op T typeName(String _typeName) {
        setTypeName(_typeName)
        return getThis()
    }
}

interface SelectElement
    extends EQLElement
{
}

class LinkfromSelectElement
    extends SelectElement, Typed<LinkfromSelectElement>
{
    String attribute
    contains Filter filter
    op LinkfromSelectElement setAttributeC(String _attribute) {
        setAttribute(_attribute)
        return this;
    }
    op LinkfromSelectElement attribute(String _attribute) {
        setAttribute(_attribute)
        return this;
    }
    op LinkfromSelectElement setFilterC(Filter _filter) {
        setFilter(_filter)
        return this;
    }
    op LinkfromSelectElement filter(Filter _filter) {
        setFilter(_filter)
        return this;
    }
    op String eqlStmt() {
        var String ret
        "linkfrom[" + typeName + "#" + attribute
        if (getFilter() !== null) {
            ret += "balal"
        }
        return ret + "]"
    }
    op LinkfromSelectElement getThis() {
        return this
    }
}

class ClassSelectElement
    extends Named<ClassSelectElement>
{
    op ClassSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "class[" + getName() + "]"
    }
    op ClassSelectElement getThis() {
        return this
    }
}

class LinktoSelectElement
    extends Named<LinktoSelectElement>
{
    op LinktoSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "linkto[" + getName() + "]"
    }
    op LinktoSelectElement getThis() {
        return this
    }
}

class AttributeSelectElement
    extends Named<AttributeSelectElement>
{
    op AttributeSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "attribute[" + getName() + "]"
    }
    op AttributeSelectElement getThis() {
        return this
    }
}

class AttributeSetSelectElement extends Named<AttributeSetSelectElement>
{
    op AttributeSetSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "attributeset[" + getName() + "]"
    }
    op AttributeSetSelectElement getThis() {
        return this
    }
}

class FormatSelectElement
    extends SelectElement
{
    String pattern
    op FormatSelectElement setPatternC(String _pattern) {
        setPattern(_pattern);
        return this
    }
    op String eqlStmt() {
        return "format[" + getPattern() + "]"
    }
}

class JoiningSelectElement
    extends SelectElement
{
    String separator
    op JoiningSelectElement setSeparatorC(String _separator) {
        setSeparator(_separator);
        return this
    }
    op String eqlStmt() {
        if (StringUtils.isNumeric(getSeparator())) {
            return "joining[" + getSeparator() + "]"
        } else {
            return "joining[\"" + getSeparator() + "\"]"
        }
    }
}

class BaseSelectElement
    extends SelectElement
{
    SimpleSelectElement element
    op BaseSelectElement setElementC(SimpleSelectElement _element) {
        setElement(_element);
        return this
    }
    op String eqlStmt() {
        return element.getLiteral()
    }
}

class ExecSelectElement
    extends SelectElement
{
    String className
    String[] parameters
    op ExecSelectElement setClassNameC(String _className) {
        setClassName(_className)
        return this
    }
    op ExecSelectElement addParameter(String _parameter) {
        parametersList.add(_parameter)
        return this
    }
    op String eqlStmt() {
        var String ret = "execute " + className;
        for (String parameter : parametersList) {
            ret = ret + " " + parameter
        }
        return ret
    }
}

class MsgPhraseSelectElement
    extends Named<MsgPhraseSelectElement>
{
    op MsgPhraseSelectElement setNameC(String _name) {
        setName(_name)
        return this
    }
    op String eqlStmt() {
        return "msgphrase[" + getName() + "]"
    }
    op MsgPhraseSelectElement getThis() {
        return this
    }
}

class Selection
    extends EQLElement
{
    container PrintStatement<?>printStatement opposite selection
    contains Select[] selects
    op Selection addSelect(Select _select) {
        selectsList.add(_select)
        return this
    }
    op String eqlStmt() {
        var String ret = " select ";
        var first = true
        for (ISelect select : getSelectsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + select.eqlStmt()
        }
        return ret
    }
}

abstract class AbstractSelect
    extends EQLElement
{
    contains SelectElement[] elements
    op String eqlStmt() {
        var String ret = " ";
        var first = true
        for (ISelectElement element : getElementsList()) {
            if (first) {
                first = false
            } else {
                ret = ret + "."
            }
            ret = ret + element.eqlStmt()
        }
        return ret
    }
}

class Select
    extends AbstractSelect
{
    String alias
    op Select setAliasC(String _alias) {
        setAlias(_alias)
        return this
    }
    op Select alias(String _alias) {
        setAlias(_alias)
        return this
    }
    op Select addElement(SelectElement _element) {
        elementsList.add(_element)
        return this
    }
    op String eqlStmt() {
        var String ret = super.eqlStmt()
        if (alias !== null) {
            ret = ret + " as \"" + alias + "\""
        }
        return ret
    }
}

class ExecSelectionElement
    extends EQLElement
{
    String index
    String alias
    op ExecSelectionElement index(String _index) {
        setIndex(_index)
        return this
    }
    op ExecSelectionElement alias(String _alias) {
        setAlias(_alias)
        return this
    }
    op String eqlStmt() {
        var String ret = index
        if (alias !== null) {
            ret = ret + " as \"" + alias + "\""
        }
        return ret
    }
}

class Where
    extends EQLElement
{
    contains WhereTerm<?>[] terms
    op Where addTerm(WhereTerm<?>_term) {
        termsList.add(_term)
        return this
    }
    op WhereElementTerm term() {
        var IWhereElementTerm ret = IEql2Factory.eINSTANCE.createWhereElementTerm
        termsList.add(ret)
        return ret
    }
    op WhereElement element() {
        var IWhereElementTerm term = term()
        termsList.add(term)
        return term.element()
    }
    op WhereElement and() {
        var IWhereElementTerm term = term()
        termsList.add(term)
        term.and()
        return term.element()
    }
    op WhereElement or() {
        var IWhereElementTerm term = term()
        termsList.add(term)
        term.or()
        return term.element()
    }
    op WhereGroupTerm group() {
        var IWhereGroupTerm ret = IEql2Factory.eINSTANCE.createWhereGroupTerm
        termsList.add(ret)
        return ret
    }
    op String eqlStmt() {
        var String ret = " where "
        for (IWhereTerm<?> term : getTermsList()) {
            ret = ret + term.eqlStmt()
        }
        return ret
    }
}

class Filter extends Where {
}

abstract class WhereTerm<T> extends EQLElement, Generic<T>
{
    Connection connection
    op String eqlStmt() {
        var String ret = ""
        if (getConnection() !== null) {
            ret = ret + " " + getConnection().getLiteral()
        }
        return ret
    }
    op T and() {
        connection = Connection.AND
        return getThis()
    }
    op T or() {
        connection = Connection.OR
        return getThis()
    }
}

class WhereElementTerm
    extends WhereTerm<WhereElementTerm>
{
    contains WhereElement element
    op WhereElement element() {
        if (getElement() === null) {
            element = IEql2Factory.eINSTANCE.createWhereElement
        }
        return getElement()
    }
    op WhereElementTerm element(WhereElement _element) {
        setElement(_element)
        return this
    }
    op String eqlStmt() {
        var String ret = super.eqlStmt()
        if (getElement() !== null) {
            ret = ret + getElement().eqlStmt()
        }
        return ret
    }
    op WhereElementTerm getThis() {
        return this
    }
}

class WhereGroupTerm
    extends WhereTerm<WhereGroupTerm>
{
    contains WhereTerm<?>[] terms
    op WhereGroupTerm addTerm(WhereTerm<?>_term) {
        termsList.add(_term)
        return this
    }
    op String eqlStmt() {
        var String ret = super.eqlStmt() + " ("
        for (IWhereTerm<?> term : getTermsList()) {
            ret = ret + term.eqlStmt()
        }
        ret = ret + ")"
        return ret
    }
    op WhereGroupTerm getThis() {
        return this
    }
}

class WhereElement
    extends EQLElement
{
    String attribute
    contains WhereSelect select
    Comparison comparison
    String[] values
    contains NestedQuery nestedQuery
    op WhereElement nestedQuery(NestedQuery _nestedQuery) {
        setNestedQuery(_nestedQuery)
        return this
    }
    op WhereElement attribute(String _attribute) {
        setSelect(
            IEql2Factory.eINSTANCE.createWhereSelect().addElement(
                IEql2Factory.eINSTANCE.createAttributeSelectElement().name(_attribute))
        )
        return this
    }
    op WhereElement select(WhereSelect _select) {
        setSelect(_select)
        return this
    }
    op WhereElement comparison(Comparison _comparison) {
        setComparison(_comparison)
        return this
    }
    op WhereElement equal() {
        setComparison(Comparison.EQUAL)
        return this
    }
    op WhereElement unequal() {
        setComparison(Comparison.UNEQUAL)
        return this
    }
    op WhereElement less() {
        setComparison(Comparison.LESS)
        return this
    }
    op WhereElement lessOrEqual() {
        setComparison(Comparison.LESSEQ)
        return this
    }
    op WhereElement greater() {
        setComparison(Comparison.GREATER)
        return this
    }
    op WhereElement greaterOrEqual() {
        setComparison(Comparison.GREATEREQ)
        return this
    }
    op WhereElement like() {
        setComparison(Comparison.LIKE)
        return this
    }
    op WhereElement in() {
        setComparison(Comparison.IN)
        return this
    }
    op WhereElement notin() {
        setComparison(Comparison.NOTIN)
        return this
    }
    op WhereElement isNull() {
        setComparison(Comparison.NULL)
        return this
    }
    op WhereElement isNotNull() {
        setComparison(Comparison.NOTNULL)
        return this
    }
    op WhereElement addValue(String _value) {
        valuesList.add(_value)
        return this
    }
    op WhereElement value(String _value) {
        valuesList.add(_value)
        return this
    }
    op WhereElement values(Iterable<String>_values) {
        for (String value : _values) {
            valuesList.add(value)
        }
        return this
    }
    op String eqlStmt() {
        var String ret;
        if (getAttribute() !== null) {
            ret = " attribute[" + getAttribute() + "]"
        } else if (getSelect() !== null) {
            ret = getSelect().eqlStmt()
        }
        ret = ret + " "
        if (comparison === null) {
            ret = ret + "eq"
        } else {
            ret = ret + comparison.getLiteral()
        }
        if (getNestedQuery() === null) {
            if (Comparison.NULL.equals(comparison) || Comparison.NOTNULL.equals(comparison)) {
            } else if (valuesList.size() === 1) {
                var String value = valuesList.get(0);
                if (value.matches("-?\\d+(\\.\\d+)?")) {
                    ret = ret + " " + value
                } else {
                    ret = ret + " \"" + value + "\""
                }
            } else {
                ret = ret + " ("
                var boolean first = true
                for (String value : valuesList) {
                    if (first) {
                        first = false
                    } else {
                        ret = ret + ", "
                    }
                    if (value.matches("-?\\d+(\\.\\d+)?")) {
                        ret = ret + " " + value
                    } else {
                        ret = ret + " \"" + value + "\""
                    }
                }
                ret = ret + ")"
            }
        } else {
            ret = ret + getNestedQuery().eqlStmt()
        }
        return ret
    }
}

class WhereSelect
     extends AbstractSelect
{
    op WhereSelect addElement(SelectElement _element) {
        elementsList.add(_element)
        return this
    }
}

class UpdateElement
    extends EQLElement
{
    String attribute
    String value
    op UpdateElement attribute(String _attribute) {
        setAttribute(_attribute)
        return this
    }
    op UpdateElement value(String _value) {
        setValue(_value)
        return this
    }
    op String eqlStmt() {
        return attribute + " = " + value
    }
    op UpdateElement getThis() {
        return this
    }
}

abstract class BaseQuery<T> extends EQLElement, Generic<T>
{
    String[] types
    contains Where where
    op T addType(String _type) {
        typesList.add(_type)
        return getThis
    }
    op T setWhereC(Where _where) {
        setWhere(_where)
        return getThis
    }
    op String eqlStmt() {
        var String ret = " query type "
        var first = true
        for (String aType : typesList) {
            if (first) {
                first = false
            } else {
                ret = ret + ", "
            }
            ret = ret + aType
        }
        if (getWhere !== null) {
            ret = ret + getWhere.eqlStmt()
        }
        return ret
    }
    op T where() {
        if (getWhere() === null) {
            setWhere(IEql2Factory.eINSTANCE.createWhere())
        }
        return getThis
    }
    op T where(Where _where) {
        setWhere(_where)
        return getThis
    }
}

class Query
    extends BaseQuery<Query>
{
    contains Limit limit
    contains Offset offset
    op Query limit(String _val) {
        var l = IEql2Factory.eINSTANCE.createLimit
        l.value(_val)
        setLimit(l)
        return this
    }
    op Query setLimitC(Limit _limit) {
        setLimit(_limit)
        return this
    }

    op Query offset(String _val) {
        var l = IEql2Factory.eINSTANCE.createOffset
        l.value(_val)
        setOffset(l)
        return this
    }
    op Query setOffsetC(Offset _offset) {
        setOffset(_offset)
        return this
    }
    op String eqlStmt() {
        var ret = super.eqlStmt()
        if (limit !== null) {
            ret = ret + " " + limit.eqlStmt()
        }
        if (offset !== null) {
            ret = ret + " " + offset.eqlStmt()
        }
        return ret
    }
    op Query getThis() {
        return this
    }
}

class NestedQuery
    extends BaseQuery<NestedQuery>
{
    contains Selection selection
    op NestedQuery selection(Selection _selection) {
        setSelection(_selection)
        return this
    }
    op NestedQuery getThis() {
        return this
    }
    op String eqlStmt() {
        var ret = "( " + super.eqlStmt()
        if (getSelection() !== null) {
            ret = ret + getSelection().eqlStmt()
        }
        ret = ret + " )"
        return ret
    }
}

enum Connection
{
    NONE as ""
    AND as "and"
    OR as "or"
}

enum Comparison
{
    EQUAL as "=="
    LESS as "<"
    LESSEQ as "<="
    GREATER as ">"
    GREATEREQ as ">="
    UNEQUAL as "!="
    LIKE as "like"
    ILIKE as "ilike"
    IN as "in"
    NOTIN as "not in"
    NULL as "is null"
    NOTNULL as "not is null"
}

enum SimpleSelectElement
{
    TYPE as "type"
    OID as "oid"
    INSTANCE as "instance"
    LABEL as "label"
    ID as "id"
    UUID as "uuid"
    NAME as "name"
    CLASS as "class"
    VALUE as "value"
    BASE as "base"
    UOM as "uom"
    FILE as "file"
    LENGTH as "length"
    STATUS as "status"
    KEY as "key"
    FIRST as "first"
    LAST as "last"
}

enum StmtFlag
{
    TRIGGEROFF as "trigger-off"
    REQCACHED as "request-cached"
    COMPANYINDEPENDENT as "company-independent"
}

interface EQLElement
{
    op String eqlStmt()
}

interface Generic<T> {
    op T getThis()
}

type Iterable<T> wraps Iterable

class FunctionSelectElement extends SelectElement {
    String value
    op FunctionSelectElement value(String _value) {
        setValue(_value)
        return this
    }
    op String eqlStmt() {
        return value
    }
}
