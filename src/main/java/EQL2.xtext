grammar org.efaps.eql2.EQL2 hidden( WS )

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.efaps.org/EQL2"

Statement:
     PrintStatement | UpdateStatement | DeleteStatement | InsertStatement | CIPrintStatement | ExecStatement;

PrintStatement:
    (PrintObjectStatement | PrintListStatement | PrintQueryStatement) selection=Selection (order=Order)?;

PrintObjectStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'print' | 'print') ('obj' | 'object') oid=OID
;

PrintListStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'print' | 'print') 'list' '(' oids+=OID (',' oids+=OID)* ')'
;

PrintQueryStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'print' | 'print') query=Query
;

UpdateStatement:
    (UpdateObjectStatement | UpdateListStatement | UpdateQueryStatement)
    'set' (updateElements+=UpdateElement) (',' updateElements+=UpdateElement)*
;

UpdateListStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'update' | 'update') 'list' '(' oids+=OID (',' oids+=OID)* ')'
;

UpdateObjectStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'update' | 'update') ('obj' | 'object') oid=OID
;

UpdateQueryStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'update' | 'update') query=Query
;

DeleteStatement:
    DeleteObjectStatement | DeleteListStatement | DeleteQueryStatement
;

DeleteObjectStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'delete' | 'delete') ('obj' | 'object') oid=OID
;

DeleteListStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'delete' | 'delete') 'list' '(' oids+=OID (',' oids+=OID)* ')'
;

DeleteQueryStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'delete' | 'delete') query=Query
;

InsertStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'insert' | 'insert') 'type' typeName=Type
    'set' (updateElements+=UpdateElement) (',' updateElements+=UpdateElement)*
;

CIPrintStatement:
    CIPrintTypeStatement | CIPrintFormStatement
;


CIPrintTypeStatement:
    'print' 'ci' 'type' typeName=Type
;

CIPrintFormStatement:
    'print' 'ci' 'form' name=Type
;

ExecStatement:
    ('with' flags+=StmtFlag (',' flags+=StmtFlag)* 'exec' | 'with' flags+=StmtFlag (',' flags+=StmtFlag)*
    'execute' | 'exec' | 'execute') className=ClazzName (parameters+=(NUM | STRING) (',' parameters+=(NUM | STRING))*)?
    ('select' selections+=ExecSelectionElement (',' selections+=ExecSelectionElement)*)? (order=Order)?;


Query:
    'query' ('type' types+=Type) (',' types+=Type)* (where=Where)? (limit=Limit)?;

UpdateElement:
    attribute=Attribute '=' value=(NUM | STRING)
;

ExecSelectionElement:
    index=NUM (=> 'as' alias=Alias)?
;

Where:
    'where' terms+=(WhereElementTerm | WhereGroupTerm)+
;

Filter:
    'filter' terms+=(WhereElementTerm | WhereGroupTerm)+
;

WhereTerm:
    WhereElementTerm | WhereGroupTerm
;

WhereElementTerm:
    connection=Connection? element=WhereElement
;

WhereGroupTerm:
    connection=Connection? '(' terms+=(WhereElementTerm | WhereGroupTerm)+ ')'
;

WhereElement:
    (attribute=Attribute | select = WhereSelect) => comparison=Comparison (
        values+=(Value | OID | STRING | BOOLEAN | NOW_FUNCTION | NOW_ADD_FUNCTION | DATE_FUNCTION | DATE_ADD_FUNCTION)
            | '(' values+=(Value | OID | STRING | BOOLEAN) ("," values+=(Value | OID | STRING | BOOLEAN))* ')'
            | nestedQuery=NestedQuery
        );

WhereSelect:
    elements+=SelectElement ('.' elements+=SelectElement)*
;

NestedQuery :
    '(' 'query' ('type' types+=Type) (',' types+=Type)* (where=Where)? (selection=Selection)? ')'
;

Value:
    NUM;

OID:
    NUM+ "."+ NUM;

enum Comparison:
    EQUAL='==' | EQUAL='eq' | LESS='<' | LESSEQ='<=' | GREATER='>' | GREATEREQ='>=' | UNEQUAL='!=' | LIKE='like'
    | IN='in' | NOTIN='not in' | NULL='is null' | NOTNULL='not is null';

enum Connection:
    AND='and' | OR='or'
;

enum StmtFlag:
    TRIGGEROFF='trigger-off' | REQCACHED='request-cached' | COMPANYINDEPENDENT='company-independent'
;

Selection:
    'select' selects+=Select (',' selects+=Select)*;

Select:
     elements+=SelectElement ('.' elements+=SelectElement)* (=> 'as' alias=Alias)?;

SelectElement:
    ( AttributeSelectElement | AttributeSetSelectElement | LinktoSelectElement
        | ExecSelectElement | BaseSelectElement | FormatSelectElement
        | LinkfromSelectElement | ClassSelectElement | MsgPhraseSelectElement
        | JoiningSelectElement | FunctionSelectElement
    )
;

LinkfromSelectElement:
    'linkfrom['typeName=(Type|LinkFromType)'#'attribute=Attribute ("," filter=Filter)? ']'
;

ClassSelectElement:
    'class['name=Type']'
;

LinktoSelectElement:
    'linkto['name=Attribute']'
;

AttributeSelectElement:
    'attribute['name=Attribute']'
;

AttributeSetSelectElement:
    'attributeset['name=Attribute']'
;

MsgPhraseSelectElement:
    'msgphrase['name=Type']'
;

FormatSelectElement:
    pattern=FORMAT
;

JoiningSelectElement:
    separator=JOINING
;

BaseSelectElement:
    element = SimpleSelectElement
;

ExecSelectElement:
    ('exec' | 'execute') className=ClazzName parameters+=(STRING | NUM)(","parameters+=(STRING | NUM))*;

FunctionSelectElement:
    value = ( NOW_FUNCTION | NOW_ADD_FUNCTION | DATE_FUNCTION | DATE_ADD_FUNCTION)
;

ClazzName hidden():
    NAMESTR('.'NAMESTR | 'select')+ (=>WS)
;

enum SimpleSelectElement:
    TYPE='type' | OID='oid' | INSTANCE='instance' | LABEL='label' | ID='id' | UUID='uuid' | NAME='name' |
    CLASS='class' | VALUE='value' | BASE='base' | UOM='uom' | FILE='file' | LENGTH='length' | STATUS='status' |
    KEY='key' | FIRST='first' | LAST='last'
;

Order:
    'order' 'by' elements+=OrderElement (',' elements+=OrderElement)*;

OrderElement:
    key=(NAMESTR | KEYWORD | NUM) ('asc' |(desc?=('desc')))?;

Limit:
    'limit' value=NUM;

Alias:
    NAMESTR | STRING | KEYWORD
;

LinkFromType:
    (NAMESTR | UUID)':'Attribute
;

Type:
    NAMESTR | UUID
;

Attribute:
    NAMESTR
;

terminal NOW_FUNCTION:
    'now()'
;

terminal NOW_ADD_FUNCTION returns ecore::EString:
    'nowAdd(' (' ')* NUM (' ')* ',' (' ')* INTERVAL (' ')* (',' (' ')* TEMPORAL_ADJUSTER (' ')* )? ')'
;

terminal DATE_FUNCTION:
    'date()'
;

terminal DATE_ADD_FUNCTION returns ecore::EString:
    'dateAdd(' (' ')* NUM (' ')* ',' (' ')* INTERVAL (' ')* (',' (' ')* TEMPORAL_ADJUSTER (' ')* )? ')'
;

terminal INTERVAL:
    'hour' | 'day' | 'week' | 'month' | 'year'
;

terminal TEMPORAL_ADJUSTER:
    'firstDayOfWeek' | 'firstDayOfMonth' | 'lastDayOfMonth' | 'firstDayOfYear'| 'lastDayOfYear'
;

KEYWORD: 'type' | 'oid' | 'instance' | 'label' | 'id' | 'uuid' | 'name' | 'class' | 'value' | 'base' | 'uom' | 'file' |
    'length' | 'status' | 'key' | 'first' | 'last';

terminal FORMAT:
    'format[' (('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | "-" | "/"  | "#" | "," | ".") | STRING )+ ']'
;

terminal JOINING:
    'joining['(STRING | NUM)+']'
;

terminal BOOLEAN:
    'true' | 'false'
;

terminal NUM:
    ('+' | '-')?('0'..'9')+;

terminal fragment HEX:
    ('a'..'f' | '0'..'9');

terminal UUID:
    HEX HEX HEX HEX HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX '-' HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX HEX;

terminal STRING:
    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
    "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal NAMESTR:
    ('^')?('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
;

terminal WS:
    (' ' | '\t' | '\r' | '\n')+;

